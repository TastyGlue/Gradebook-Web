@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (UserStateContainer.IsPopulated)
{
    <MudLayout>
        <MudAppBar Elevation="4">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => isDrawerOpen = !isDrawerOpen)" />
            <MudSpacer />
            @* <UserProfile /> *@
            <MudDrawer @bind-Open="isDrawerOpen" ClipMode="DrawerClipMode.Docked" Elevation="8">
                @* <NavMenu /> *@
            </MudDrawer>
        </MudAppBar>
        <MudMainContent>
            <MudOverlay Visible="IsLoading" ZIndex="1010" LightBackground Absolute="true">
                <MudProgressCircular Size="@Size.Large" Indeterminate="true" Color="@Color.Primary" />
            </MudOverlay>
            @Body
        </MudMainContent>
    </MudLayout>
}

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    bool isDrawerOpen = true;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    [Inject] public UserStateContainer UserStateContainer { get; set; } = default!;

    [Inject] public LoaderService LoaderService { get; set; } = default!;

    public ClaimsPrincipal User { get; set; } = default!;

    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        LoaderService.Register(state =>
        {
            InvokeAsync(() =>
            {
                IsLoading = state;
                StateHasChanged();
            });
        });

        User = (await authenticationStateTask).User;

        if (!(User.Identity?.IsAuthenticated ?? false))
        {
            NavigationManager.NavigateTo("/account/login");
            return;
        }

        CreateUserStateContainer();
    }

    private void CreateUserStateContainer()
    {
        if (UserStateContainer.Id == Guid.Empty)
        {
            UserStateContainer.Id = new Guid(User.FindFirstValue(Claims.USER_ID)!);
        }

        if (string.IsNullOrWhiteSpace(UserStateContainer.UserName))
        {
            UserStateContainer.UserName = User.FindFirstValue(Claims.USERNAME)!;
        }

        if (string.IsNullOrWhiteSpace(UserStateContainer.Email))
        {
            UserStateContainer.Email = User.FindFirstValue(Claims.EMAIL)!;
        }

        if (string.IsNullOrWhiteSpace(UserStateContainer.FullName))
        {
            UserStateContainer.FullName = User.FindFirstValue(Claims.FULL_NAME)!;
        }

        if (UserStateContainer.ProfileId == Guid.Empty)
        {
            UserStateContainer.ProfileId = new Guid(User.FindFirstValue(Claims.PROFILE_ID)!);
        }

        if (string.IsNullOrWhiteSpace(UserStateContainer.SchoolName))
        {
            UserStateContainer.SchoolName = User.FindFirstValue(Claims.SCHOOL_NAME);
        }

        if (UserStateContainer.SchoolId is null && UserStateContainer.SchoolId == Guid.Empty)
        {
            var schoolIdClaim = User.FindFirstValue(Claims.SCHOOL_ID);
            UserStateContainer.SchoolId = string.IsNullOrWhiteSpace(schoolIdClaim) ? null : new Guid(schoolIdClaim);
        }

        if (UserStateContainer.ClassId is null && UserStateContainer.ClassId == Guid.Empty)
        {
            var classIdClaim = User.FindFirstValue(Claims.CLASS_ID);
            UserStateContainer.ClassId = string.IsNullOrWhiteSpace(classIdClaim) ? null : new Guid(classIdClaim);
        }

        if (UserStateContainer.Role == 0)
        {
            var role = User.FindFirstValue(Claims.ROLE)!;
            if (Enum.TryParse(role, out RoleType userRole))
            {
                UserStateContainer.Role = userRole;
            }
            else
            {
                UserStateContainer.Role = RoleType.Student; // Default role if parsing fails
            }
        }

        UserStateContainer.IsPopulated = true;
    }
}
